# Работа с текстом

# grep — поиск по регулярным выражениям
grep -Rni ‘test’ .
grep -v ‘test’ file.txt
ps afx | grep mysql
# awk — полноценный язык обработки текста, удобен для разбиения строк
awk -F ':' '{print $1}' /etc/passwd
# sed — редактирование файлов с использованием регулярных выражений
find . -type f -name '*.conf' -exec sed --follow-symlinks -i 's|1|2|g' {} \;
# uniq — исключение дублей
# sort — сортировка строк

# Найти количество скрытых файлов в директории (начинаются с .)
ls -ap | grep -v "/$" | grep "^\." | wc -l
ls -la | grep "^-" | grep "\ \." | wc -l
ls -la | grep "^-.*\ \." | wc -l
ls -la | grep -c "^-.*\ \."

# Отобразить только права доступа из списка файлов
ls -la /etc/ | grep ^- | cut -d " " -f 1 | sort | uniq | grep -v total
ls -la /etc/ | grep ^- | cut -d " " -f 1 | sort | uniq | grep -v total | wc -l

# Работа с логами

# Фильтрация лога
cat messages | grep err | grep -P '\d{2}:\d{2}:00'

# Последние 10 строк лога
tail -n 10 messages

# Первые 10 строк лога
head -n 10 messages

# Просмотр сообщений в реальном времени
tail -f messages

# 1. Написать регулярное выражение, которое проверяет валидный IP-адрес. 
# Например, 192.168.1.1 подойдет, а 256.300.1.1 — нет.

1. ^(1?[0-9]{1,2}\.|2[0-4][0-5]\.|25[0-5]\.){3}(1?[0-9]{1,2}|2[0-4][0-5]|25[0-5]){1}$

# Real
2. ^(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{2}|[0-9])(\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{2}|[0-9])){3}$

# 2. Написать регулярное выражение, которое проверяет, является ли указанный 
# файлом нужного типа (на выбор .com,.exe или .jpg,.png,.gif и т.д.). 
# Написать регулярное выражение для проверки, ведет ли ссылка URL на некоторый файл,
# и это действительно ссылка на картинку (например, http://site.com/folder/1.png), 
# а не на любой файл.

1. ^https?:\/\/(www\.)?\w{1,63}\.[a-zA-Z]{1,63}\/?(\S*\/){0,100}(\w)*\.png$|\w*\.jpg$|\w*\.gif$

2. .*\.(jpg|gif|png)$
^(https?)\:\/\/[-a-z0-9]*\.[a-z]+\/[0-9a-z-\/]+\.(jpg|png|gif|jpeg)$

# 3. *Написать регулярное выражение, которое проверяет, является выведенное
# значение «белым» IP-адресом (5.255.255.5 подойдет, а 172.16.0.1 — нет).

1. (^10\.(1?[0-9]{1,2}\.|2[0-4][0-5]\.|25[0-5]\.){2}
   (1?[0-9]{1,2}|2[0-4][0-5]|25[0-5]){1}$)|
   (^172\.(1[6-9]\.|2[0-9]\.|3[0-1]\.)
   (1?[0-9]{1,2}\.|2[0-4][0-5]\.|25[0-5]\.){1}
   (1?[0-9]{1,2}|2[0-4][0-5]|25[0-5]){1}$)|
   (^192\.168\.(1?[0-9]{1,2}\.|2[0-4][0-5]\.|25[0-5]\.){1}
   (1?[0-9]{1,2}|2[0-4][0-5]|25[0-5]){1}$)|
   (^100\.(6[4-9]\.|[7-9][0-9]\.|1[0-1][0-9]\.|12[0-7]\.)
   (1?[0-9]{1,2}\.|2[0-4][0-5]\.|25[0-5]\.){1}(1?[0-9]{1,2}|2[0-4][0-5]|25[0-5]){1}$
   
   grep -P -v

# real
(\d+)(?<!127)(?<!10)\.(\d+)(?<!192\.168)(?<!172\.(1[6-9]|2\d|3[0-1]))\.(\d+)\.(\d+)
    
2. ^(?!127|10|192\.168|172\.1[6-9]|172\.2\d]|172\.3[0-1])(?:(25[0-5]|24\d|2[0-4]|1\d\d|\d\d|\d)\.){3}(?:25[0-5]|24\d|2[0-4]|1\d\d|\d\d|\d)$

# 4. *Написать регулярное выражение, которое проверяет, что файл в URL
# (например, https://site.ru/folder/download/test.docx) не обладает неким 
# расширением (например .exe не пройдет, или .sh — не пройдет. Выбор списка
# исключенных расширений за вами).

1. ^https?:\/\/(www\.)?\w{1,63}\.[a-zA-Z]{1,63}\/?(\S*\/){0,100}(\w*\.exe$

grep -P -v ...
echo https://site2.com/files/uploads/file1.exe | grep -P -v '^https?:\/\/(www\.)?\w{1,63}\.[a-zA-Z]{1,63}\/?(\S*\/){0,100}(\w*\.exe$)'

2. ^(?:(https?)\:\/\/)?([a-z0-9-])(?:[a-z0-9-])*\.(?:[a-z]{1,7})(\/{1}+).+\.(?!sh|exe).{1,4}$

# real
^(?:(https?)\:\/\/)?(www\.)?([a-z0-9-])(?:[a-z0-9-])*\.(?:[a-z]{1,7})(\/{1}+).+\.(?!sh|exe).{1,4}$

# Парсинг логов Nginx
Топ IP по количеству запросов: awk '{print $1}' access.log | sort | uniq -c | sort -nr | head -20
Количество запросов по кодам: cat access.log | cut -d '"' -f3 | cut -d ' ' -f2 | sort | uniq -c | sort -rn
Ошибки 404: awk '($9 ~ /404/)' access.log | awk '{print $7}' | sort | uniq -c | sort -rn

# Парсинг логов TLS c гистограммой
cat ssl.log | cut -d ' ' -f 2,2 | sort | uniq -c | sort -rn | perl -ane 'printf "%30s %s\n", $F[1], "="x$F[0];'
# Просто показать версии TLS
awk '{print $1}' ssl.log | sort | uniq -c | sort -nr | head -10


# Задачи по HTML
1. Удалить все тэги. <\/?[^>]*>   <\/?.*?>
2. Найти все заголовки.  <h\d>(.*?)<\/h\d>
3. Собрать адреса ссылок. <a.*href="(?<link>.+)">
4. Заменить все адреса https:// на //.
5. Заменить стиль form на test_form. class="(form)"  class="test_$1"

# Задачи по test.log
1. Найти картинки JPEG из /img/gallery*.
2. Найти response time > 1 секунды.
3. Найти количество запросов из Windows
4. Вывести запросы межу 13:30 и 13:40.
5. + только POST запросы.
6. Найти ut > 100 ms для домена p.metodlab.ru
7. Найти ошибки 4xx.

# Вырезание таблицы из бекапа.

sed -n -e '/DROP TABLE.*`actor`/,/UNLOCK TABLES/p' sak.sql > tabledump.sql

# Поиск файлов с заменой
find . -type f -name '*.conf' -exec sed -i --follow-symlinks -E 's|allow\s+85|include /etc/nginx/modsecurity-off.conf;|g' {} \;
 
# Редактирование симлинков
find /home/httpd//i/* -type l -printf 'ln -nsf "$(readlink "%p" | sed s!/var/www/!/home/httpd/!)" "$(echo "%p" | sed s!/var/www!/home/httpd!)"\n' > script.sh


